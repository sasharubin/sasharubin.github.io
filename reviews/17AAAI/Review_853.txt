This paper is about validating temporal-planning domains. "Temporal" means that
actions have durations, and "validation" means that ensuring that a formal
specification of a domain captures the conceptualisation of a physical system
(rather than capturing the physical system itself, which requires empirical
tools [1]).

The paper gives a syntax and semantics (based on a temporal-planning language
called ANML), and then shows how to reduce validation problems to satisfiability
problems over the logic LTL_RA which is linear temporal logic whose atoms are
arithmetic expressions over rational arithmetic terms. The paper illustates the
method by stating six types of validation queries that can be modeled (e.g., action
executability, plan generation, plan validation), and briefly discussing a
prototype implementation that uses the nuxmv model-checker for solving the
satisfiability of the resulting LTL_RA formula expressing action executability
(*).

The paper makes a first step at tackling a difficult problem, but has some
methodological issues that are not adequately addressed:

- The paper identifies LTL_RA as a suitable logic in which to encode temporal
  planning domains: the logic can capture the ANML temporal-planning languages
  which itself (the authors state) is able to capture the temporal fragment of
  PDDL 2.1. The logic can also handle a number of validation queries. 

- Domain validation is a modeling problem, and as such, it seems to me, it is
  hard to judge whether a given tool or approach is useful except by actually
  using it. The present work only contains a prototype, with limited evaluation,
  and so it is too preliminary to tell if the proposed technique will have
  impact. Moreover, the list of validation queries that the logic can handle
  does not have references to the literature supporting that these indeed are
  valuable/common/useful queries. Actually, the paper cited by the authors that
  argues that modeling planning domains is error-prone, i.e., [1] below, only 
  mentions plan validation and mutex.

- The paper has one important unstated assumption: that ANML is faithfully
  represented in the syntax and semantics presented. Indeed, 1) the syntax
  presented is not that of ANML, but rather an "abstract syntax [that
  corresponds to the] semantics of a planning problem in the ANML language", and
  2) the semantics given in the paper is not justified in any way as capturing ANML. 
  I sympethise that this is a difficult and vaguely defined task, however, how can
  one be confident that the semantics given faithfully capture ANML and do not contain 
  errors. The authors do not address this issue.

- The related-work discussion does not give a clear picture. This is due to poor
  phrasing, undefined terms, and insufficient comparisons. 

On the whole, I think the work presents some creative ideas that are worth
publishing, but there are are some important unaddressed methodological
questions that give me doubt and suggest the work, as is, has limited
significance.

-------------------
Comments to Authors
-------------------


General
-------

- What are the advantages or disadvantages of using LTL_RA over established
  machinery for dealing with timing (e.g., timed-automata)?

- What examples were used in the evaluation? The sentence "The tools is able to
  quickly handle all the ANML handcrafted domains we testes on the various
  queries" is too vague.

- It is not clear to what extent on needs the full power of LTL_RA. E.g., the
  running example does not use rational multiplication. Is there any advantage
  to using LTL_PA (LTL with presburger constraints, i.e., using + and <) [2]?

- There is not a satisfactory discussion of the drawbacks of the proposed
  technique.

- One of the methods suggested in [1] for validating planning domains is for the
  modeler to read a translation of their domain in another language. Could your
  syntax + semantics be used for this purpose? or the translation into LTL_RA?


Comments about Related Work
---------------------------
- In the related-work you mention that VAL is the state-of-the-art for plan
  validation. Since your technique also can deal with plan-validation (and a lot
  more), how does your technique compare (in principle, and in practice) on
  plan-validation to VAL? The same question can also be raised for a comparison
  with mutex and reachability queries and HSTS. 

- This section would benefit from a comparison with/discussion of other
  languages, similar to LTL_RA, that have been used in the verification
  community to model continuous variables. E.g., Signal Temporal Logic,
  Constraint LTL, Metric Temporal Logic, Timed Modal Logic.

- A comment for your consideration. Your translation (after dfn 14) seems to
  work if one interprets LTL_RA over finite traces (instead of infinite ones). 

- The paragraph titled "Domain specific" discussing the work of Cimatti et al
  2010 (in Validation Queries) is vague.

Comments to improve/correct the presentation
--------------------------------------------

- The semantics of LTL_RA are badly described. 
E.g., You write "The semantics of LTL_RA is given over the paths of a transition
system." However, no transition system is mentioned. 
E.g., You also write "Since we allow for the next operator we interpret the
logic on a pair of consecutive time points instead of a single one". First,
"next operator" is ambiguous (you mean the primed variables and not the temporal
operator). Second, the semantics are not given over pairs of time points, but
rather over assignments \sigma of the non-primed variables. .

- Please define "rational fluent" and "Boolean fluent" before using the words in
  formal definitions.

- Please underline all objects being defined.
E.g., in Definition 1 you are defining "rational expression"
E.g., in Definition 4, TIL, durative action, conditions, instantaneous effects,
timed goals.

- Definitions 9, 10,12 require a lot of attention. 
In dfn 9: Why is CH a multi-set? Also, the \geq should be \leq.
In dfn 10: last line: elements of CH are not triples but 5-tuples.
In dfn 12: (t_0) should be (t), I think.

- You say that "the encoding disallows self-concurrency". Where in the encoding
  do you specify that at most (exactly?) one action holds at any one time?


Other comments
--------------

- Some important statements are unjustified/uncited/undefined.
e.g., "This is rarely a problem in practice"...
e.g., "Most formal approaches for validation..."
e.g., "SAL"
e.g., "valid executions of P" (start of section "encoding in LTL_RA").

- Some phrases are hard to understand. 
e.g., "...we can use this query to validate planning procedures against any
model-checker for infinite-domain LTL_RA". What are "planning procedures"? What
is "infinite-domain LTL_RA"? Is there a finite-domain LTL_RA?
e.g., "temporal flexibility"
e.g., "suitable type for f" (in definition 4).
e.g., "in fact, a TIL at time 0 is an initial condition" (what if [e_1] \neq 0?)
e.g., "would make the problem badly-defined"..
e.g., "furthermore, the initial state can be enforced in LTL_RA instead of treating it as a TIL".

(*) The shortlink with the implementation did not work. I got the following
error: "http://goo.gl/30c65k – this goo.gl shortlink has been disabled. It was
found to be violating our Terms of Service. Click here and here for more
information about our terms and policies respectively."

[1] Planning Domains and Plans: Validation, Verification and Analysis
Derek Long, Maria Fox, Richard Howey

[2] An automata-theoretic approach to constraint LTL
S. Demri, D. D’Souza
FST&TCS’02




