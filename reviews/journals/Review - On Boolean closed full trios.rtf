{\rtf1\ansi\ansicpg1252\cocoartf1344\cocoasubrtf720
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww24960\viewh15480\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs42 \cf0 Summary of paper:\
\
The class of regular languages has many robust properties. One of these is that they are closed under rational transductions, i.e., relations that are computable by asynchronous multi-tape automata. Another is that they are closed under the Boolean operations (union, complemention). This paper studies so called ``principal Boolean closed full trios''. These are classes of languages that are generated by a single language L (principal), closed under Boolean operations (Boolean closed) and that are full trios (i.e., closed under rational transductions, which is known to be equivalent to being closed under three types of transductions: morphisms, inverse morphisms, and intersections with regular languages).\
\
There are two main results in this paper. \
\
The first main result (Theorem 1) is that there is a finite set of rational transductions F (in fact, just three rational transductions suffice) such that every principal Boolean closed full trio generated by a non-regular language L exhausts the arithmetic hierarchy relative to L.  \
\
The main work to prove Theorem 1 is to show how to simulate any set that is recursively-enumerable in L using a fixed set of transductions (that do not depend on L). This is done by coding runs of Turing-powerful machines by composing and iterating certain transductions.\
\
The authors then go on to look at the class generated by *synchronous* rational transductions (SRAT) from a non-regular language L. The prove their second main result (Theorem 2) that states that there are non-regular languages L such that the class generated by L and synchronous rational transductions and the Boolean operations reaches arbitrarily high in the arithmetical hierarchy. The proof of this is an adaptation of the proof of Theorem 1. They also prove (Theorem 3) that there are non-regular languages L such that the closure of L under Boolean operations and synchronised rational transductions results in languages which are all recursive. \
\
They also supply a reformulation of Theorem 1 in terms of modal logic on rational Kripke frames.\
\
Evaluation:\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 The results in this paper to seem to be new, and the proof techniques, in the main, standard. I could not find any mathematical errors.\
\
Also, there are some new ideas here. Although it is well known that iterating (even synchronous) rational transductions can be used to simulate computations of Turing-powerful machines, what seems to be new in this paper is that a fixed set of transductions can simulate all Turing machines (Theorem 1). One of the ideas in the paper that makes this work is that, being non-regular, L has infinitely many Myhill-Nerode equivalence classes, and thus representatives of these classes can code the natural numbers (which can be used to simulate the values of a counter in a counter machine for the given recursively-enumerable language). \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 \
I have three critical remarks.\
1. the results are not well motivated,\
2. the related work is not sufficiently detailed,\
3. some of the proofs are needlessly hard to follow.\
\
Regarding 1., the regular languages have many nice closure properties. Why is it interesting to single out the combination of being Boolean closed and a full trio? On page 2 the authors cite 4 reasons. \
\
The first 3 reasons given by the authors are actually about the nice *decidability* properties of the regular languages (and automatic structures), which seem, on the surface, only tangentially related to being a Boolean closed full trio (i.e., the definition of Boolean closed full trio makes no mention of effectiveness). The authors briefly explain that their results imply that "in a full trio, virtually no decidability property can coexist with Boolean closure". I think the authors mean that if a) there was a Boolean closed full trio C that was different to the class of regular languages, and if b) emptiness was decidable for terms in C, then this would induce a new notion of C-automatic structure or C-automata. Theorem 1 precludes the existence of such a class C. However, to get a notion of C-automatic it is sufficient to have that C is closed under Boolean operations and *synchronous* rational transductions. The results of this paper do not seem to say anything new about such classes C.\
\
The 4th reason given by the authors is more convincing: it says that there are many natural full trios generated by a single language L (principal full trio). In this light, Theorem 1 carries some weight. It implies that a principal full trio that is Boolean closed and that contains a non-regular language exhausts the arithmetic hierarchy.\
\
Regarding critical remark 2., there is some important relevant work that should be cited, but more importantly, discussed.\
\
Here are some that come to mind.\
\
- Sebastian Seibert "Quantifier hierarchies over word relations", CSL 1992. \
I learned of this paper in Wolfgang Thomas' "Languages, Automata, and Logic", Handbook of Formal Languages, 1997, where he describes Seibert's work as follows: "...the application of boolean operations and projection to asynchronously recognized relations leads to nonrecursive relations, and indeed one can exhaust in this way the arithmetical hierarchy of word relations and languages." What is the exact relationship between the present work and Seibert's paper? Perhaps the key difference is that Seibert's hierarchy is built from rational relations (of arbitrary arity), while the languages in the present paper are built from a single language using binary rational relations?\
\
- The B\\"uchi-Elgot-Trakhtenbrot theorem implies that (*): synchronised rational transductions can be characterised as those transductions that are definable (modulo coding a string by its characteristic set) in WMSO formulas of (\\mathbb\{N\},+1). See also the corresponding universal automatic structures in Blumensath/Gr\\"adel "Automatic Structures", LICS, 2000.  What is the relationship between fact (*) and the present work? For example, it seems that Theorem 3 should follow from (*) and [18].\
\
- The authors should discuss the relationship between the present work (its results and the proof techniques) and the many *undecidability* results about: rational transductions (e.g., intersection, equivalence, etc.); about synchronous rational transductions (e.g., that SRAT can code successive configurations of Turing Machines, and thus questions about iterations of such transducers are undecidable); and about the expansion by predicates/relations of logical formalisms that capture SRAT, e.g., (\\mathbb\{N\},+1,x \\mapsto 2x) has undecidable WMSO-theory because one can define arithmetic operations in it (Robinson 1958, or Elgot/Rabin, JSL, 1966), and thus the definable sets exhaust the arithmetic hierarchy. See also Wolfgang Thomas "On monadic theories of monadic predicates", 2010. \
\
Regarding critical remark 3., the readability of many of the proofs (especially, but not only, the claim on Pg 16) could be greatly improved with a few intuitive remarks along the way, rather than just defining a long sequence of languages.\
\
Suggested improvements:\
\
Besides addressing the critical remarks above, I feel the preliminaries section could be slightly expanded. For instance, a number of basic facts about rational transductions are used implicitly. The cost of making these explicit is low, and the payoff high. Here are two such facts: the composition of two rational transductions is a rational transduction (Elgot/Mezei); the ``well known fact'' that a class of languages is closed under rational transductions iff it is closed under homomorphisms, inverse homomorphisms, and intersections with regular languages, follows from Nivat's normal form for rational transductions. Also, some terminology is used throughout but not explained in the preliminaries, e.g., ``a class of languages has decidable emptiness problem'' (see comment in Detailed remarks).\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 Overall: the subject is relevant to the journal, the title and abstract are descriptive of the content, the article is well organised and readable. However, the motivation and related work need serious attention. In particular, although I believe that the main results (Theorem 1 and 2) are new, there is insufficient discussion in the related work section to see to what extent there is overlap with existing results and techniques.\
\
I recommend acceptance pending a second review or a rebuttal.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 \
\
Detailed remarks: \
\
Abstract:\
- 'arithemtical'. there are other spelling mistakes in the document (``anwers'', ``sychronous'', ``defineable'', ...)\
- ``decidable language''. I think it is typical to say that a ``problem is decidable'' and a ``language is recursive (or computable)''. At any rate, it would help if the terminology was consistent, and so one suggestions is to replace ''decidable language'' by ''recursive language''.\
- ``Our construction''. Say which construction.\
\
Introduction\
Pg 1\
Line 36: It is not clear to me that the study of closure properties of language classes can be traced back to [11]. The algebraic character of logic goes back to Boole, although perhaps a more relevant reference would be Tarski's relation algebras (Tarski, "Foundations of the Calculus of Systems", 1935).\
L 37-39: Unclear, please rephrase.\
L 41: ''in many cases''. Please give examples.\
\
Pg 2\
L 11: if you keep the ``automatic structures'' motivation, then please give a sentence to explain how being closed under images and pre-images of length preserving morphisms is related (i.e., projection can be realised using these operations, as can cylindrification).\
\
Here, and elsewhere, you write ``the decidability of the emptiness problem''. I see this is explained on pg 16 L 25-29. Since it is mentioned much earlier, this explanation should go to the preliminaries. Perhaps also improve the description, e.g., ''decide, given a term built from the operations and the atomic languages, whether or not the language denoted by the term is empty or not''.\
\
Pg 3\
Please say what AFL stands for, and why it is relevant.\
\
Preliminaries\
You often use functional notation for transductions. Please introduce this notation in the preliminaries.\
\
Pg 4\
Homomorphism could be defined (or at least mention it is a morphism wrt concatenation), and perhaps mention that they are rational transductions (a fact used implicitly throughout).\
\
Pg 5\
L 24: Perhaps say why AH(L) is a Boolean closed full trio.\
\
The importance of Corollaries 2 and 3 could be made clearer.\
\
\
Pg 6.\
Lemma 1. ''can be obtained using transductions from F''. Please say what this means, i.e., using composition and application of a transduction to a language.\
\
Lemma 2. perhaps help the reader a little by saying that $m$ codes the sequence of (b-many) transductions in base b.\
\
Definition 2.\
- $n$ is not quantified.\
- perhaps say that u_i represents the numeral i, or the ith position.\
\
L 50: replace \\equiv by \\equiv_L.\
\
Pg 12:\
L 4: Here 0^0 seems to be a symbol, but earlier (Lemma 1) it meant the empty word. \
\
Pg 14\
The definition of ``Transducer'' is mentioned here for the first time. Please incorporate it in the preliminaries. For instance, what does it mean to have a transducer over an alphabet X? I gather you mean that it is an automaton over the monoid X* \\times X^*.\
\
Lemma 6: please give more details of this proof. \
\
Pg 15\
L 40: perhaps collect properties of the standard encodings in the preliminaries.\
\
Pg 16\
L 5: give reference to \\Sigma_n-complete/hard. again, perhaps put this in the preliminaries.\
L 19: define shuffle operator.\
\
I found the proof of this claim hard to follow. Please add some intuitions.\
\
Pg 18\
Lemma 9: Perhaps stress that A_K does not depend on u or P_u, but only on the term constructing K.\
\
}