Dear Hector, Dear Giuseppe:

Here is a summary of today's discussion with some extra thoughts.

A. MOTIVATING Question: How can one describe a planning domain?

- Answer 1: As the set \cal{E} of POND problems P that a) reduce to some fixed
  POND P', b) satisfy some fairness condition.  
- Answer 2: As the set \cal{E} of POND problems represented by
  environment-strategies that enforce some fixed formula (which may express
  action effects as well as trajectory constraints).

We think that Answer 2 generalises Answer 1.

Let \cal{E} be the set of POND problems as in Answer 2.  Then one can reason
about properties of \cal{E}. E.g., if \psi is a CTL* formula over actions and
observations, then one can decide if every P in \cal{E} satisfies \psi.


B. EMPIRICAL Question: What trajectory constraints naturally appear in planning
problems?

This seems a subtle question. E.g., consider the tree-chopping example. We
suggested the following trajectory constraint: "infinitely many chops implies
eventually down". However, the following constraint is simpler and does the job:
"always chop implies eventually down"? 

FUZZY Question: How do we decide which constraints are the right ones? To give
an answer it seems that we need to start with a formalism in which to describe,
e.g., parameterised planning problems.

C. ALGORITHMIC Question: What is the complexity of solving synthesis using
trajectory constraints identified in the answer to the previous EMPIRICAL
question? Do these fit into fragments of LTL whose synthesis problem is known to
be in EXPTIME (rather than 2EXPTIME)? 
- e.g., synthesis for Boolean combinations of formulas that only use
  "conjunction", "eventually" and "next" is in EXPTIME [1].
- e.g., synthesis over transition systems with justice requirements (i.e.,
  infinitely often p holds) and GR(1) fairness requirements (i.e., L \limp R
  where both L and R are given by DETERMINISTIC Buchi automata) is in EXPTIME
  [2].


EMPIRICAL Observation: All the examples in [2] seem to require trajectory
constraints that are Boolean combinations of formulas that only use
"eventually", "globally", "infinitely often" and "finitely often". Actually,
they are all conjunctions of formulas of the form L \limp R where R only talks
about observations.


The countdown, vacuum-cleaner, tree-chopping, wall-following examples all
exhibit trajectory constraints of the form: (**) Conjunction of implications of
the form L \limp R where L = "Boolean combination of (if some action is done in
some state infinitely often) and R = "some observation is sensed".

- e.g., tree-chopping: infinitely many *chops* implies eventually sense the tree
  is *down*.
- e.g., vacuum-cleaner: infinitely many *right* implies eventually sense
  right-hand-edge of corridor.
- e.g., countdown: infinitely many *decrement* and finitely many *increments*
  implies eventually sense counter is zero.
- e.g., wall-following: infinitely many *wall to my right and walk forward*
  implies eventually sense *hit wall to my right and front, or hit no wall to my
  right nor to my front*, AND infinitely many *"traverse column"* implies
  eventually sense right hand edge of grid, where "traverse column" is shorthand
  for something like "if the wall is to my right and i walk forward then
  eventually i hit the wall to my front and right, and if then i turn left 90
  degrees and walk forward then eventually i hit empty space, and if then i turn
  right 90 degrees and walk forward then eventually i hit empty space, and if
  then i turn right 90 degrees and walk forward then eventually i hit a wall to
  my front".

ALGORITHMIC Question: what is the complexity of synthesising agent-strategies
for transition systems with trajectory constraints of the form (**)? i.e., can
it be done in EXPTIME (rather than 2EXPTIME)?

2. Here is another line of thought.

Fix a finite set of observations O, actions A, and goal observations G \subseteq
O. Let \mu:O^* \to A be a finite-state policy.

Question: what can be said about the set ENV(\mu) of all POND problems P (with
observations O, actions A, goal G) for which \mu solves P?
Answer: The set ENV(\mu) is regular (formally, the set of all tree-unfoldings of
P \in ENV(\mu) is a regular set of trees).

Consequently, one can decide (LTL, CTL*, etc.) properties of ENV(\mu).

E.g., Let \mu be the policy that "sucks and moves to the right, and stops when
the right-hand-side is sensed".
Then ENV(\mu) includes all the finite corridors, but also other, perhaps
unintended, problems (such as the one in which the suck action instantly wipes
out all the dirt in all the squares).


[1] Alur, La Torre, "Deterministic Generators and Games for Ltl Fragments",
LICS01.

[2] Piterman, Pnueli, Sa'ar, "Synthesis of Reactive(1) Designs", VMCAI06.
