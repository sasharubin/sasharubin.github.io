Executive Summary: Yes, TB15 use the same idea. I'm 2 years late!
Giuseppe, thanks for the early catch.

TB15 solve the problem of planning with LTLf goals by converting the
LTLf formula into an AFW and then encoding emptiness of the AFW into
deterministic planning.

What is left to do?

1. As a special case one could do LTLf satisfiability (use a planning
domain with one operator for each valuation) and compare with Moshe's
work.

2. My previous email sketched how to reduce to non-deterministic
planning (not to deterministic planning, as TB15 do).  Would this give
good/better performance? or are deterministic planners just so much
faster than non-deterministic planners?

3. TB15 suggest that planers can solve NFW emptiness faster than AFW
emptiness (on automata of comparable sizes). The reason they give is
an artifact of their encoding.  I'd like to understand if this must
always be the case. Indeed, emptiness of NFW is logspace-complete,
while emptiness of AFW is ptime-complete (assuming explicit inputs).
So, the latter is harder in the worst case. But, why should it be
harder on non-random benchmarks?

Are any of these interesting to you?


Sasha

p.s. TB15 is a reasonably written paper(!) e.g., it does a nice job
explaining AFW and LTLf, and a reasonable (but not perfect) job of
separating concerns, i.e., describing the mathematics behind the
translations before describing the encoding into a planning language.

p.p.s. GDG:
- you say "PS. Is having an action for each possible symbol
  problematic in your construction? (The symbols are all propositional
  interpretation of fluent.)".  Can you explain what you mean? I start
  with an LTLf formula over atoms A. Then, my actions are valuations
  of the atoms.
- you say "It's an interesting reading (the translation as some
  bookkeeping that maybe can be clean up)." I agree that one might be
  able to simplify TB15. What sort of things help performance?  e.g.,
  they have more actions than needed, e.g., they have actions which
  basically compute \delta, i.e., they run down the recursive
  definition of the \delta produced by the translation from LTLf to
  AFW. Why can't this be precomputed?

p.p.p.s. Hector: I will look at LTL goal recognition as soon as I can.

